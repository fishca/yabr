Перем Владелец;              // ВнешняяОбработкаОбъект - обработка владелец
Перем ПараметрыОбработки;    // Структура              - параметры обработки
Перем ЗапоминатьНомераСтрок; // Булево                 - Истина - при чтении файла,
                             //                          будут запоминаться номера строк для каждого элемента
Перем ПутьКФайлу;            // Строка                 - путь к файлу для чтения
Перем НачальнаяСтрока;       // Число                  - номер начальной строки файла для чтения
Перем УровниЗаписей;         // Массив(Число)          - номера уровней записей скобкофайла,
                             //                          которые будут переданы на дальнейшую обработку

#Область ПрограммныйИнтерфейс

// Функция - Возвращает значения параметров обработки
// 
// Возвращаемое значение:
//	Структура - параметры обработки
//
Функция Параметры() Экспорт
	
	Возврат ПараметрыОбработки;
	
КонецФункции // Параметры()

// Процедура - Устанавливает значения параметров обработки
//
// Параметры:
//	СтруктураПараметров      - Структура     - значения параметров обработки
//
Процедура УстановитьПараметры(Знач СтруктураПараметров) Экспорт
	
	ПараметрыОбработки = СтруктураПараметров;
	
	Если ПараметрыОбработки.Параметры.Свойство("ЗапоминатьНомераСтрок") Тогда
		ЗапоминатьНомераСтрок = ПараметрыОбработки.Параметры.ЗапоминатьНомераСтрок;
	КонецЕсли;
	
	Если ПараметрыОбработки.Параметры.Свойство("ПутьКФайлу") Тогда
		ПутьКФайлу = ПараметрыОбработки.Параметры.ПутьКФайлу;
	КонецЕсли;
	
	Если ПараметрыОбработки.Параметры.Свойство("УровниЗаписей") Тогда
		УровниЗаписей = ПараметрыОбработки.Параметры.УровниЗаписей;
	КонецЕсли;
	
	Если ПараметрыОбработки.Параметры.Свойство("НачальнаяСтрока") Тогда
		НачальнаяСтрока = ПараметрыОбработки.Параметры.НачальнаяСтрока;
	Иначе
		НачальнаяСтрока = 1;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметры()

// Процедура - устанавливает данные для обработки
//
// Параметры:
//	Данные      - Структура     - значения параметров обработки
//
Процедура УстановитьДанные(Знач ВходящиеДанные) Экспорт
	
	Данные = ВходящиеДанные;
	
КонецПроцедуры // УстановитьДанные()

// Функция - возвращает текущие результаты обработки
//
// Возвращаемое значение:
//	Произвольный     - результаты обработки данных
//
Функция РезультатыОбработки() Экспорт
	
	Возврат НакопленныеДанные;
	
КонецФункции // РезультатыОбработки()

// Процедура - выполняет обработку данных
//
Процедура ОбработатьДанные() Экспорт
	
	Если НЕ ДобавитьЗапись(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	Владелец.ПродолжениеОбработкиДанных(НакопленныеДанные[НакопленныеДанные.ВГраница()], ПараметрыОбработки);
	
КонецПроцедуры // ОбработатьДанные()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает объект владелец о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанных() Экспорт
	
	Если НЕ Владелец = Неопределено Тогда
		Попытка
			Владелец.ЗавершениеОбработкиДанных(ПараметрыОбработки);
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

#КонецОбласти

#Область ИнтерфейсныеПроцедурыИФункции

// Процедура - Прочитать скобко файл
//
Процедура ПрочитатьСкобкоФайл(Знач Данные = Неопределено) Экспорт
	
	//ПроверитьДопустимостьТипа(ОбязательныеСвойства,
	//                          "Строка, Файл, Поток, ПотокВПамяти, ФайловыйПоток",
	//                          "Некорректно указан источник данных, тип ""%1"", ожидается тип %2!");
	
	СтруктураЧтения = ИнициализироватьЭлемент(Неопределено);
	
	Текст = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);
	
	ДанныеСтроки = Текст.ПрочитатьСтроку();
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекНачало = Начало;
	НачКоличество = 0;
	
	Скорость = 0;
	ТекСкорость = 0;
	
	НомерСтроки = 1;
	
	Пока НЕ ДанныеСтроки = Неопределено Цикл
		
		Если НомерСтроки < НачальнаяСтрока И НЕ НачальнаяСтрока < 1 Тогда
			ДанныеСтроки = Текст.ПрочитатьСтроку();
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		СтрокаДляОбработки = "";
		СтрокаДляОбработкиПрочитана = Ложь;
		КавычкиОткрыты = Ложь;
		
		// сборка "завершенной" строки, где кавычки закрыты и последний символ = "," или "}"
		НомераСтрок = Новый Соответствие();
		Пока НЕ (СтрокаДляОбработкиПрочитана ИЛИ ДанныеСтроки = Неопределено) Цикл
			Если ЗапоминатьНомераСтрок ИЛИ НомераСтрок.Количество() = 0 Тогда
				НомераСтрок.Вставить(НомерСтроки, НомерСтроки);
			КонецЕсли;
			СтрокаДляОбработкиПрочитана = ДополнитьСтрокуДляОбработки(СтрокаДляОбработки, ДанныеСтроки, КавычкиОткрыты);
			Если НЕ СтрокаДляОбработкиПрочитана Тогда
				Если КавычкиОткрыты Тогда
					СтрокаДляОбработки = СтрокаДляОбработки + Символы.ПС;
				КонецЕсли;
				ДанныеСтроки = Текст.ПрочитатьСтроку();
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		
		СчетчикСимволов = 1;
		
		ПрочитатьДанныеСтроки(СтруктураЧтения, СтрокаДляОбработки, СчетчикСимволов, НомераСтрок);
		
		Если НомерСтроки % 1000 = 0 Тогда
			ТекСкорость = (НомерСтроки - НачКоличество) / (ТекущаяУниверсальнаяДатаВМиллисекундах() - ТекНачало) * 1000;
			Скорость = НомерСтроки / (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) * 1000;
			НачКоличество = НомерСтроки;
			ТекНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		КонецЕсли;
		
		ДанныеСтроки = Текст.ПрочитатьСтроку();
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаДляОбработки) Тогда
		ПрочитатьДанныеСтроки(СтруктураЧтения, СтрокаДляОбработки, СчетчикСимволов, НомераСтрок);
	КонецЕсли;
	
	Владелец.ОкончаниеЧтенияДанных(ПараметрыОбработки);
	
	НачальнаяСтрока = НомерСтроки;
	
	// переход к корневому элементу структуры чтения
	Пока НЕ СтруктураЧтения.Родитель = Неопределено Цикл
		СтруктураЧтения = СтруктураЧтения.Родитель;
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьСкобкоФайл()
  
#КонецОбласти

#Область ПроцедурыИФункцииОбработкиПрочитанныхСтрок

// Функция - добавляет строку к исходной и возвращает признак завершенности строки
// исходя из закрытия кавычек и окончания строки на "," или "}" 
//
// Параметры:
//  ДополняемаяСтрока    - Строка - исходная строка
//  Дополнение           - Строка - добавляемая строка
//  КавычкиОткрыты       - Булево - Истина - кавычки открыты; Ложь - кавычки закрыты
// 
// Возвращаемое значение:
//  Булево - Истина - строка завершена; Ложь - строка не завершена
//
Функция ДополнитьСтрокуДляОбработки(ДополняемаяСтрока, Дополнение, КавычкиОткрыты)
	
	КоличествоКавычек = СтрЧислоВхождений(Дополнение, """");
	
	Если КавычкиОткрыты Тогда
		КавычкиОткрыты = (КоличествоКавычек % 2 = 0);
	Иначе
		КавычкиОткрыты = (КоличествоКавычек % 2 = 1);
	КонецЕсли;
	
	ДополняемаяСтрока = ДополняемаяСтрока + Дополнение;
	
	ПоследнийСимвол = Сред(Дополнение, СтрДлина(Дополнение), 1);
	
	// строка завершена если кавычки закрыты и последний символ = "," или "}"
	Возврат (НЕ КавычкиОткрыты) И (ПоследнийСимвол = "}" ИЛИ ПоследнийСимвол = ",");
	
КонецФункции // ДополнитьСтрокуДляОбработки()

// Функция - создает структуру нового элемента
//
// Параметры:
//  Родитель     - Структура              - ссылка на элемент-родитель (для корневого элемента "Неопределено")
//  НомераСтрок  - Соответствие(Число)    - массив номеров строк из которых был прочитан элемент
// 
// Возвращаемое значение:
//  Структура    - Новый элемент
//		*Родитель    - Структура            - ссылка на элемент-родитель
//		*Уровень     - Число                - уровень иерархии элемента
//		*Индекс      - Число                - индекс элемента в массиве значений родителя
//		*НомераСтрок - Соответствие(Число)  - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока   - Число                - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока   - Число                - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения    - Массив(Структура)    - массив дочерних элементов
//
Функция ИнициализироватьЭлемент(Знач Родитель, Знач НомераСтрок = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	Уровень = 0;
	Если ТипЗнч(Родитель) = Тип("Структура") Тогда
		Если Родитель.Свойство("Уровень") Тогда
			Уровень = Родитель.Уровень + 1;
		КонецЕсли;
	КонецЕсли;
	
	Индекс = 0;
	Если ТипЗнч(Родитель) = Тип("Структура") Тогда
		Если Родитель.Свойство("Значения") Тогда
			Индекс = Родитель.Значения.ВГраница() + 1;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура("Родитель,
	                            |Уровень,
	                            |Индекс,
	                            |НомераСтрок,
	                            |НачСтрока,
	                            |КонСтрока,
	                            |Значения",
	                            Родитель,
	                            Уровень,
	                            Индекс,
	                            НомераСтрок,
								0,
								0,
	                            Новый Массив());
	
	ДополнитьНомераСтрокРодителей(Результат);
	
	Возврат Результат;
	
КонецФункции // ИнициализироватьЭлемент()

// Процедура - дополняет массивы номеров строк родительских элементов номерами строк указанного элемента
//
// Параметры:
//  Элемент          - Структура           - структура элемента
//		*Родитель    - Структура           - ссылка на элемент-родитель
//		*Уровень     - Число               - уровень иерархии элемента
//		*Индекс      - Число               - индекс элемента в массиве значений родителя
//		*НомераСтрок - Соответствие(Число) - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока   - Число               - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока   - Число               - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения    - Массив(Структура)   - массив дочерних элементов
//  НомераСтрок      - Соответствие(Число) - массив номеров строк для заполнения
// 
Процедура ДополнитьНомераСтрокРодителей(Знач Элемент, Знач НомераСтрок = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	
	Для Каждого ТекПара Из НомераСтрок Цикл
		Элемент.НачСтрока = ?(Элемент.НачСтрока = 0, ТекПара.Значение, Мин(Элемент.НачСтрока, ТекПара.Значение));
		Элемент.КонСтрока = Макс(Элемент.КонСтрока, ТекПара.Значение);
		
		Если ЗапоминатьНомераСтрок ИЛИ Элемент.НомераСтрок.Количество() = 0 Тогда
			Элемент.НомераСтрок.Вставить(ТекПара.Ключ, ТекПара.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТекЭлемент = Элемент.Родитель;
	Пока НЕ ТекЭлемент = Неопределено Цикл
		Для Каждого ТекПара Из НомераСтрок Цикл
			ТекЭлемент.НачСтрока = ?(ТекЭлемент.НачСтрока = 0, ТекПара.Значение, Мин(ТекЭлемент.НачСтрока, ТекПара.Значение));
			ТекЭлемент.КонСтрока = Макс(ТекЭлемент.КонСтрока, ТекПара.Значение);
			Если ЗапоминатьНомераСтрок ИЛИ ТекЭлемент.НомераСтрок.Количество() = 0 Тогда
				ТекЭлемент.НомераСтрок.Вставить(ТекПара.Ключ, ТекПара.Значение);
			КонецЕсли;
		КонецЦикла;
		ТекЭлемент = ТекЭлемент.Родитель;
	КонецЦикла;
	
КонецПроцедуры // ДополнитьНомераСтрокРодителей()

// Процедура - Читает, разбирает данные из переданной строки и добавляет результат в иерархию массива структур
//
// Параметры:
//  ЭлементДляЗаполнения     - Структура                 - структура элемента
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//  ДанныеСтроки             - Строка                    - строка для разбора
//  СчетчикСимволов          - Число                     - счетчик прочитанных символов переданной строки
//  НомераСтрок              - Соответствие(Число)       - массив номеров строк, на основе которых была сформирована структура текущего уровня
//
Процедура ПрочитатьДанныеСтроки(ЭлементДляЗаполнения,
                                ДанныеСтроки,
                                СчетчикСимволов,
                                НомераСтрок = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	ТекСтрока = "";
	КавычкиОткрыты = Ложь;
	ПредСимвол = "";
	
	ДлинаСтроки = СтрДлина(ДанныеСтроки);
	
	// посимвольное чтение строки
	Для й = СчетчикСимволов По ДлинаСтроки Цикл
		ТекСимвол = Сред(ДанныеСтроки, й, 1);
		
		Если КавычкиОткрыты Тогда // обработка строки внутри кавычек
			Если ТекСимвол = """" Тогда
				Если Сред(ДанныеСтроки, й, 2) = """""" Тогда  // это экранированные кавычки внутри строки
					ТекСтрока = ТекСтрока + Сред(ДанныеСтроки, й, 2);
					й = й + 1;
				Иначе // закрытие кавычек
					ТекСтрока = ТекСтрока + ТекСимвол;
					КавычкиОткрыты = Ложь;
				КонецЕсли;
			Иначе // любой символ добавляется к строке
				ТекСтрока = ТекСтрока + ТекСимвол;
			КонецЕсли;
		ИначеЕсли ТекСимвол = """" Тогда // открытие кавычек
			ТекСтрока = ТекСтрока + ТекСимвол;
			КавычкиОткрыты = Истина;
		ИначеЕсли ТекСимвол = "{" Тогда // открытие вложенного списка
			Если ЭлементДляЗаполнения = Неопределено Тогда
				ВремЭлементДляЗаполнения = ИнициализироватьЭлемент(Неопределено, НомераСтрок);
				ЭлементДляЗаполнения = ВремЭлементДляЗаполнения;
			Иначе
				ВремЭлементДляЗаполнения = ИнициализироватьЭлемент(ЭлементДляЗаполнения, НомераСтрок);
				ЭлементДляЗаполнения.Значения.Добавить(ВремЭлементДляЗаполнения);
			КонецЕсли;
			й = й + 1;
			ПрочитатьДанныеСтроки(ВремЭлементДляЗаполнения, ДанныеСтроки, й, НомераСтрок);
			Если й > СтрДлина(ДанныеСтроки) Тогда
				ЭлементДляЗаполнения = ВремЭлементДляЗаполнения; // если строка закончилась, то "наверх" поднимается элемент текущего уровня
				Возврат;
			КонецЕсли;
		ИначеЕсли ТекСимвол = "}" Тогда // закрытие вложенного списка
			Если НЕ (ПредСимвол = "{" ИЛИ ПредСимвол = "}" ИЛИ ПредСимвол = "") Тогда
				ЭлементДляЗаполнения.Значения.Добавить(ТекСтрока);
				ТекСтрока = "";
				ДополнитьНомераСтрокРодителей(ЭлементДляЗаполнения, НомераСтрок);
			КонецЕсли;
			
			// обработка добавленного элемента по правилам обработки
			ОбработатьЭлементДанных(ЭлементДляЗаполнения);
			
			ЭлементДляЗаполнения = ЭлементДляЗаполнения.Родитель;
			
			СчетчикСимволов = й + 1;
			Возврат;
		ИначеЕсли ТекСимвол = "," Тогда // добавление элемента текущего списка
			Если НЕ (ПредСимвол = "}" ИЛИ ПредСимвол = "") Тогда
				ЭлементДляЗаполнения.Значения.Добавить(ТекСтрока);
				ТекСтрока = "";
				ДополнитьНомераСтрокРодителей(ЭлементДляЗаполнения, НомераСтрок);
			КонецЕсли;
		Иначе
			ТекСтрока = ТекСтрока + ТекСимвол;
		КонецЕсли;
		
		ПредСимвол = ТекСимвол;
	КонецЦикла;
	
	СчетчикСимволов = й;
	
КонецПроцедуры // ПрочитатьДанныеСтроки()

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииОбработкиЭлементов

// Процедура - выполняет обработку элемента данных
//
// Параметры:
//  Элемент                  - Структура                 - проверяемый элемент
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//
Процедура ОбработатьЭлементДанных(Элемент)
	
	Владелец.ПередатьДанныеНаОбработку(Элемент, ПараметрыОбработки);
	
КонецПроцедуры // ОбработатьЭлементДанных()

// Процедура - выполняет обработку оповещения об окончании чтения данных
//
Процедура ОкончаниеЧтенияДанных() Экспорт
	
	Возврат;
	
КонецПроцедуры // ОкончаниеЧтенияДанных()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - удаляет начальные, конечные и экранированные кавычки из строки
//
// Параметры:
//  ПарамСтрока	 - Строка - строка для обработки
// 
// Возвращаемое значение:
//   Строка - результирующая строка
//
Функция ОбработатьКавычкиВСтроке(Знач ПарамСтрока)
	
	ПарамСтрока = СтрЗаменить(ПарамСтрока, """""", """");
	
	Если Лев(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 2);
	КонецЕсли;
	
	Если Прав(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 1, СтрДлина(ПарамСтрока) - 1);
	КонецЕсли;
	
	Возврат СокрЛП(ПарамСтрока);
	
КонецФункции // ОбработатьКавычкиВСтроке()

// Функция - проверяет тип значения на соответствие допустимым типам
//
// Параметры:
//  Значение             - Произвольный                 - проверяемое значение
//  ДопустимыеТипы       - Строка, Массив(Строка, Тип)  - список допустимых типов
//  ШаблонТекстаОшибки   - Строка                       - шаблон строки сообщения об ошибке
//                                                        ("Некорректный тип значения ""%1"" ожидается тип %2")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьДопустимостьТипа(Знач Значение, Знач ДопустимыеТипы, Знач ШаблонТекстаОшибки = "")
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗнч(ДопустимыеТипы) = Тип("Строка") Тогда
		МассивДопустимыхТипов = СтрРазделить(ДопустимыеТипы, ",");
	ИначеЕсли ТипЗнч(ДопустимыеТипы) = Тип("Массив") Тогда
		МассивДопустимыхТипов = ДопустимыеТипы;
	Иначе
		ВызватьИсключение СтрШаблон("Некорректно указан список допустимых типов, тип ""%1"" ожидается тип %2!",
		                            Тип(ДопустимыеТипы),
									"""Строка"" или ""Массив""");
	КонецЕсли;
	
	Типы = Новый Соответствие();
	
	СтрокаДопустимыхТипов = "";
	
	Для Каждого ТекТип Из МассивДопустимыхТипов Цикл
		ВремТип = ?(ТипЗнч(ТекТип) = Тип("Строка"), Тип(СокрЛП(ТекТип)), ТекТип);
		Типы.Вставить(ВремТип, СокрЛП(ТекТип));
		СтрокаДопустимыхТипов = СтрокаДопустимыхТипов
		                      + ?(СтрокаДопустимыхТипов = "",
							      "",
							      ?(МассивДопустимыхТипов.Найти(ТекТип) = МассивДопустимыхТипов.ВГраница(),
								    " или ",
								    ", "))
		                      + """" + СокрЛП(ТекТип) + """";
	КонецЦикла;
	
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Некорректный тип значения ""%1"" ожидается тип %2!";
	КонецЕсли;
	
	Если Типы[ТипЗначения] = Неопределено Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СокрЛП(ТипЗначения), СтрокаДопустимыхТипов);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДопустимостьТипа()

#КонецОбласти

ЗапоминатьНомераСтрок = Ложь;
