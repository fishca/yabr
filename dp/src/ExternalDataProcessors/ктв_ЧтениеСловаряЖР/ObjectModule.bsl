Перем Результат;

#Область ОбработчикиКомандФормы

// Процедура - выполняет чтение и обработку указанного файла
//
// Параметры:
//	Элемент            - ПутьКФайлу          - путь к файлу для чтения
//
Процедура Прочитать(ПутьКФайлу) Экспорт
	
	ОбработкаЧтения = ПолучитьВнешнююОбработкуПоИмени("ктв_ЧтениеСкобкофайла");
	
	ОбработкаЧтения.ДобавитьПравилоОбработки(1, ЭтотОбъект);
	
	ОбработкаЧтения.ПрочитатьСкобкоФайл(ПутьКФайлу);
	
КонецПроцедуры // Прочитать()

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция - возвращает результат, накопленный обработкой
// 
// Параметры:
//  ЗавершениеОбработки      - Булево       Истина - выполнить действия при завершении обработки
//
// Возвращаемое значение:
//  Произвольный -  результат, накопленный обработкой
//
Функция ПолучитьРезультат(ЗавершениеОбработки = Ложь) Экспорт
	
	Возврат Результат;
	
КонецФункции // ПолучитьРезультат()

// Процедура - проверяет, что элемент является записью словаря журнала регистрации
// и добавляет его в соответствующий словарь
//
// Параметры:
//	Элемент         - Структура       проверяемый элемент
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//
Процедура ДобавитьЗапись(Элемент) Экспорт
	
	Если НЕ Элемент.Уровень = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСловаря = "";
	Если Элемент.Значения[0] = "1" Тогда
		ИмяСловаря = "Пользователи";
	ИначеЕсли Элемент.Значения[0] = "2" Тогда
		ИмяСловаря = "Компьютеры";
	ИначеЕсли Элемент.Значения[0] = "3" Тогда
		ИмяСловаря = "Приложения";
	ИначеЕсли Элемент.Значения[0] = "4" Тогда
		ИмяСловаря = "События";
	ИначеЕсли Элемент.Значения[0] = "5" Тогда
		ИмяСловаря = "Метаданные";
	ИначеЕсли Элемент.Значения[0] = "6" Тогда
		ИмяСловаря = "Серверы";
	Иначе
		Возврат;
	КонецЕсли;
	
	Запись = Новый Структура();
	
	Если ИмяСловаря = "Пользователи"
	 ИЛИ ИмяСловаря = "Метаданные" Тогда
		Запись.Вставить("Ид", Элемент.Значения[1]);
		Запись.Вставить("Значение", ОбработатьКавычкиВСтроке(Элемент.Значения[2]));
		Запись.Вставить("Индекс", Число(Элемент.Значения[3]));
	Иначе
		Запись.Вставить("Значение", ОбработатьКавычкиВСтроке(Элемент.Значения[1]));
		Запись.Вставить("Индекс", Число(Элемент.Значения[2]));
	КонецЕсли;
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат = Новый Структура();
	КонецЕсли;
	
	Если НЕ Результат.Свойство(ИмяСловаря) Тогда
		Результат.Вставить(ИмяСловаря, Новый Соответствие());
	КонецЕсли;
	
	Результат[ИмяСловаря].Вставить(Запись.Индекс, Запись.Значение);
	
КонецПроцедуры // ДобавитьЗапись()

// Функция - проверяет, что элемент является записью словаря журнала регистрации
// и проверяет необходимость удаления элемента
//
// Параметры:
//	Элемент                  - Структура          - проверяемый элемент (см. НужноУдалитьЭлемент)
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//
// Возвращаемое значение:
//   Булево - Истина - элемент нужно удалить после обработки
//
Функция НужноУдалитьЭлемент(Элемент) Экспорт
	
	Если НЕ Элемент.Уровень = 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // НужноУдалитьЭлемент()

#КонецОбласти

#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - ищет внешнюю обработку по указанному имени рядом с текущей и подключает ее
// возвращает объект подключенной обработки
//
// Параметры:
//  ИмяОбработки         - Строка        - имя внешней обработки
// 
// Возвращаемое значение:
//  ВнешняяОбработкаОбъект        - внешняя обработка
// 
Функция ПолучитьВнешнююОбработкуПоИмени(ИмяОбработки)
	
	ФайлЭтойОбработки = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
	
	ПутьКОбработке = ФайлЭтойОбработки.Путь + ИмяОбработки + ФайлЭтойОбработки.Расширение;
	
	Возврат ВнешниеОбработки.Создать(ПутьКОбработке, Ложь);
	
КонецФункции // ПолучитьВнешнююОбработкуПоИмени()

// Функция - удаляет начальные, конечные и экранированные кавычки из строки
//
// Параметры:
//  ПарамСтрока	 - Строка - строка для обработки
// 
// Возвращаемое значение:
//   Строка - результирующая строка
//
Функция ОбработатьКавычкиВСтроке(Знач ПарамСтрока)
	
	ПарамСтрока = СтрЗаменить(ПарамСтрока, """""", """");
	
	Если Лев(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 2);
	КонецЕсли;
	
	Если Прав(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 1, СтрДлина(ПарамСтрока) - 1);
	КонецЕсли;
	
	Возврат СокрЛП(ПарамСтрока);
	
КонецФункции // ОбработатьКавычкиВСтроке()

#КонецОбласти
