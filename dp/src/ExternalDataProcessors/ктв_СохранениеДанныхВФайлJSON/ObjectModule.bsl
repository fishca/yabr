Перем Владелец;
Перем ПараметрыОбработки;
Перем Данные;
Перем НакопленныеДанные;
Перем ПутьКФайлу;

#Область ПрограммныйИнтерфейс

// Функция - Возвращает значения параметров обработки
// 
// Возвращаемое значение:
//	Структура - параметры обработки
//
Функция Параметры() Экспорт
	
	Возврат ПараметрыОбработки;
	
КонецФункции // Параметры()

// Процедура - Устанавливает значения параметров обработки
//
// Параметры:
//	СтруктураПараметров      - Структура     - значения параметров обработки
//
Процедура УстановитьПараметры(Знач СтруктураПараметров) Экспорт
	
	ПараметрыОбработки = СтруктураПараметров;
	
	Если ПараметрыОбработки.Параметры.Свойство("ПутьКФайлу") Тогда
		ПутьКФайлу = ПараметрыОбработки.Параметры.ПутьКФайлу;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметры()

// Процедура - устанавливает данные для обработки
//
// Параметры:
//	Данные      - Структура     - значения параметров обработки
//
Процедура УстановитьДанные(Знач ВходящиеДанные) Экспорт
	
	Данные = ВходящиеДанные;
	
КонецПроцедуры // УстановитьДанные()

// Функция - возвращает текущие результаты обработки
//
// Возвращаемое значение:
//	Произвольный     - результаты обработки данных
//
Функция РезультатыОбработки() Экспорт
	
	Возврат НакопленныеДанные;
	
КонецФункции // РезультатыОбработки()

// Процедура - выполняет обработку данных
//
Процедура ОбработатьДанные() Экспорт
	
	ДобавитьЗапись(Данные);
	
	Владелец.ПродолжениеОбработкиДанных(НакопленныеДанные[НакопленныеДанные.ВГраница()], ПараметрыОбработки);
	
КонецПроцедуры // ОбработатьДанные()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает объект владелец о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанных() Экспорт
	
	ЗаписатьДанныеВФайл();
	
	Если НЕ Владелец = Неопределено Тогда
		Попытка
			Владелец.ЗавершениеОбработкиДанных(ПараметрыОбработки);
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

#КонецОбласти

#Область ОбработкаДанных

// Процедура - добавляет запись в массив данных для сохранения
//
// Параметры:
//	Элемент         - Произвольный                    - добавляемый элемент
//
Процедура ДобавитьЗапись(Элемент)
	
	Если НЕ ТипЗнч(НакопленныеДанные) = Тип("Массив") Тогда
		НакопленныеДанные = Новый Массив();
	КонецЕсли;
	
	НакопленныеДанные.Добавить(Элемент);
	
КонецПроцедуры // ДобавитьЗапись()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - выполняет запись переданных данных в файл
//
// Параметры:
//   ОчиститьДанныеПослеЗаписи    - Булево         - Истина - очистить буфер данных после записи в файл
//
Процедура ЗаписатьДанныеВФайл(ОчиститьДанныеПослеЗаписи = Истина)
	
	Если НЕ ТипЗнч(НакопленныеДанные) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если НакопленныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Новый ЗаписьJSON();
	
	Запись.ОткрытьФайл(ПутьКФайлу, КодировкаТекста.UTF8, , Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб));
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты      = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Попытка
		ЗаписатьJSON(Запись, НакопленныеДанные, НастройкиСериализации);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Запись.Закрыть();
	
КонецПроцедуры // ЗаписатьДанныеВФайл()

#КонецОбласти
