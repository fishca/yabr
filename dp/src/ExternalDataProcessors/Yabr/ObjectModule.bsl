Перем Настройки;

Функция Настройки() Экспорт
	
	Возврат Настройки;
	
КонецФункции // Настройки()

Процедура УстановитьНастройки(Знач ПарамНастройки) Экспорт
	
	ПроверитьДопустимостьТипа(ПутьКФайлуНастроек,
	                          "Строка, Файл",
	                          СтрШаблон("Некорректно указаны настройки ""%1"",", СокрЛП(ПарамНастройки)) +
							  ", тип ""%1"", ожидается тип %2!");
							  
	Если ТипЗнч(ПарамНастройки) = Тип("Строка") Тогда
		Если Лев(СокрЛП(ПарамНастройки), 1) = "{" Тогда
			Настройки = ПрочитатьНастройкиИзСтроки(ПарамНастройки);
		Иначе
			Настройки = ПрочитатьНастройкиИзФайла(ПарамНастройки);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПарамНастройки) = Тип("Файл") Тогда
		Настройки = ПрочитатьНастройкиИзФайла(ПарамНастройки);
	ИначеЕсли ТипЗнч(ПарамНастройки) = Тип("Структура") Тогда
		Настройки = ПарамНастройки;
	КонецЕсли;
	
КонецПроцедуры // УстановитьНастройки()

Функция ПрочитатьНастройкиИзФайла(Знач ПутьКФайлуНастроек)
	
	ПроверитьДопустимостьТипа(ПутьКФайлуНастроек,
	                          "Строка, Файл",
	                          СтрШаблон("Некорректно указан файл настроек ""%1"",", СокрЛП(ПутьКФайлуНастроек)) +
							  ", тип ""%1"", ожидается тип %2!");
	
	Если ТипЗнч(ПутьКФайлуНастроек) = Тип("Файл") Тогда
		ФайлНастроек = ПутьКФайлуНастроек;
		ПутьКФайлуНастроек = ФайлНастроек.ПолноеИмя;
	ИначеЕсли ТипЗнч(ПутьКФайлуНастроек) = Тип("Строка") Тогда
		ФайлНастроек = Новый Файл(ПутьКФайлуНастроек);
	КонецЕсли;
	
	Если НЕ ФайлНастроек.Существует() Тогда
		ВызватьИсключение СтрШаблон("Ошибка чтения файла настроек ""%1"", файл не найден!",
		                            ПутьКФайлуНастроек);
	КонецЕсли;
	
	ВремТекст = Новый ТекстовыйДокумент();
	ВремТекст.Прочитать(ПутьКФайлуНастроек, КодировкаТекста.UTF8);
	
	Возврат ПрочитатьНастройкиИзСтроки(ВремТекст.ПолучитьТекст());
	
КонецФункции // ПрочитатьНастройкиИзФайла()

Функция ПрочитатьНастройкиИзСтроки(Знач СтрокаНастроек)
	
	СтрокаНастроек = СтрЗаменить(СтрокаНастроек,
	                             "$yabrRoot",
	                             СтрЗаменить(КаталогФайла(ЭтотОбъект.ИспользуемоеИмяФайла), "\", "\\"));
	
	ЧтениеДанныхОтвета = Новый ЧтениеJSON();
	ЧтениеДанныхОтвета.УстановитьСтроку(СтрокаНастроек);
		
	Возврат ПрочитатьJSON(ЧтениеДанныхОтвета, Ложь, , ФорматДатыJSON.ISO);
	
КонецФункции // ПрочитатьНастройкиИзСтроки()

Функция ОбработатьДанные() Экспорт
	
	ПроверитьДопустимостьТипа(Настройки, "Структура", "Некорректно заполнены настройки, тип ""%1"", ожидается тип %2!");
	ПроверитьСвойства(Настройки, "ОбработкаЧтения, ПутьКДанным, Обработчики", "Отсутствуют обязательные настройки: %1");
	
	ОбработкаЧтения = ВнешниеОбработки.Создать(Настройки.ОбработкаЧтения, Ложь);
	
	Для Каждого ТекОбработчик Из Настройки.Обработчики Цикл
	КонецЦикла;
	
КонецФункции // ОбработатьДанные()

Функция ПроверитьДопустимостьТипа(Знач Значение, Знач ДопустимыеТипы, Знач ШаблонТекстаОшибки = "")
	
	ТипЗначения = ТипЗнч(Значение);
	
	МассивДопустимыхТипов = СтрРазделить(ДопустимыеТипы, ",");
	
	Типы = Новый Соответствие();
	
	СтрокаДопустимыхТипов = "";
	
	Для Каждого ТекТип Из МассивДопустимыхТипов Цикл
		Типы.Вставить(Тип(СокрЛП(ТекТип)), СокрЛП(ТекТип));
		СтрокаДопустимыхТипов = СтрокаДопустимыхТипов
		                      + ?(СтрокаДопустимыхТипов = "",
							      "",
							      ?(МассивДопустимыхТипов.Найти(ТекТип) = МассивДопустимыхТипов.ВГраница(),
								    " или ",
								    ", "))
		                      + """" + СокрЛП(ТекТип) + """";
	КонецЦикла;
	
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Некорректный тип значения ""%1"" ожидается тип %2!";
	КонецЕсли;
	
	Если Типы[ТипЗначения] = Неопределено Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СокрЛП(ТипЗначения), СтрокаДопустимыхТипов);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДопустимостьТипа()

Функция ПроверитьСвойства(Знач ПроверяемаяСтруктура, Знач ОбязательныеСвойства, Знач ШаблонТекстаОшибки = "")
	
	МассивСвойств = СтрРазделить(ОбязательныеСвойства, ",");
	
	СтрокаСвойств = "";
	
	Для Каждого ТекСвойство Из МассивСвойств Цикл
		
		Если ПроверяемаяСтруктура.Свойство(СокрЛП(ТекСвойство)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСвойств = СтрокаСвойств
		                      + ?(СтрокаСвойств = "", Символы.ПС, ", " + Символы.ПС)
		                      + """" + СокрЛП(ТекСвойство) + """";
	КонецЦикла;
						  
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Отсутствуют обязательные свойства: %1";
	КонецЕсли;
	
	Если НЕ СтрокаСвойств = "" Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СтрокаСвойств);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьСвойства()

// Функция - Определяет каталог файла
//
// Параметры:
//  ПутьКФайлу	 - Строка - путь к проверяемому файлу
// 
// Возвращаемое значение:
//   Строка - каталог файла
//
Функция КаталогФайла(ПутьКФайлу)
	
	ВремФайл = Новый Файл(ПутьКФайлу);
	
	Возврат Сред(ВремФайл.Путь, 1, СтрДлина(ВремФайл.Путь) - 1);
	
КонецФункции // КаталогФайла()

