&НаКлиенте
Перем КаталогТекущейОбработки;

#Область ОбработчикиЭлементовФормы

// Процедура - обработка начала выбора файла
//
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Настройки чтения данных (*.json)|*.json";
	Диалог.Заголовок = "Настройки чтения данных";

	ЗавершениеВыбораФайла = Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение", ЭтаФорма);
	
	Диалог.Показать(ЗавершениеВыбораФайла);
	
КонецПроцедуры // ПутьКФайлуНачалоВыбора()

// Процедура - продолжение обработки выбора файла
//
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлуНастроек = ВыбранныеФайлы[0];
	
КонецПроцедуры // ПутьКФайлуНачалоВыбораЗавершение()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "ОбработатьДанные"
//
&НаСервере
Процедура ОбработатьДанныеНаСервере(Настройки)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.УстановитьПараметрыОбработкиДанных(Настройки);
	
	ОбработкаОбъект.ОбработатьДанные();
	
КонецПроцедуры // ОбработатьДанныеНаСервере()

// Процедура - обработчик команды "ОбработатьДанные"
//
&НаКлиенте
Процедура ОбработатьДанные(Команда)
	
	Настройки = ПрочитатьНастройки();
	
	ОбработатьДанныеНаСервере(Настройки);
	
КонецПроцедуры // ОбработатьДанные()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - обработчик команды "ОбработатьДанные"
//
&НаСервере
Функция ПрочитатьНастройкиНаСервере(АдресНастроек)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбработкаОбъект.ПрочитатьПараметрыОбработкиДанных(ПолучитьИзВременногоХранилища(АдресНастроек));
	
КонецФункции // ПрочитатьНастройкиНаСервере()

// Процедура - обработчик команды "ОбработатьДанные"
//
&НаКлиенте
Функция ПрочитатьНастройки()
	
	АдресНастроек = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлуНастроек), ЭтотОбъект.УникальныйИдентификатор);
	
	Настройки = ПрочитатьНастройкиНаСервере(АдресНастроек);
	
	ПодключитьОбработки(Настройки);
	
	Возврат Настройки;
	
КонецФункции // ПрочитатьНастройки()

// Процедура - обработчик команды "ОбработатьДанные"
//
&НаКлиенте
Процедура ПодключитьОбработки(ПараметрыОбработки)
	
	Если ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		Для Каждого ТекЭлемент Из ПараметрыОбработки Цикл
			Если ТекЭлемент.Ключ = "ПутьКОбработке" Тогда
				ИмяОбработки = "";
				ПараметрыОбработки.Свойство("ИмяОбработки", ИмяОбработки);
				ИмяОбработки = ПодключитьВнешнююОбработку(ТекЭлемент.Значение, ИмяОбработки);
			Иначе
				ПодключитьОбработки(ТекЭлемент.Значение);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяОбработки) Тогда
			ПараметрыОбработки.Вставить("ИмяОбработки", ИмяОбработки);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыОбработки) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из ПараметрыОбработки Цикл
			ПодключитьОбработки(ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры // ПодключитьОбработки()

// Функция - ищет внешнюю обработку по указанному имени и пути, подключает ее
// и возвращает имя подключенной обработки
//
// Параметры:
//  ПутьКОбработке       - Строка        - путь к файлу обработки
//  ИмяОбработки         - Строка        - имя внешней обработки
// 
// Возвращаемое значение:
//  ВнешняяОбработкаОбъект        - внешняя обработка
// 
&НаКлиенте
Функция ПодключитьВнешнююОбработку(Знач ПутьКОбработке, Знач ИмяОбработки = "")
	
	АдресОбработки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКОбработке), ЭтотОбъект.УникальныйИдентификатор);
	
	Возврат ПодключитьВнешнююОбработкуНаСервере(АдресОбработки, ИмяОбработки);
	
КонецФункции // ПодключитьВнешнююОбработку()

// Функция - подключает внешнюю обработку из указанного хранилища с указанным именем
// возвращает имя подключенной обработки
//
// Параметры:
//  ИмяОбработки         - Строка        - имя внешней обработки
// 
// Возвращаемое значение:
//  ВнешняяОбработкаОбъект        - внешняя обработка
// 
&НаСервере
Функция ПодключитьВнешнююОбработкуНаСервере(Знач АдресОбработки, Знач ИмяОбработки = "")
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий();
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Возврат ВнешниеОбработки.Подключить(АдресОбработки, ИмяОбработки, Ложь, ОписаниеЗащиты);
	
КонецФункции // ПодключитьВнешнююОбработкуНаСервере()

// Функция - возвращает путь к каталогу текущей обработки
// 
// Возвращаемое значение:
//	Строка       - путь к каталогу текущей обработки
//
&НаСервере
Функция КаталогТекущейОбработкиНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбработкаОбъект.КаталогТекущейОбработки();
	
КонецФункции // КаталогТекущейОбработкиНаСервере()

// Функция - возвращает путь к каталогу текущей обработки
// 
// Возвращаемое значение:
//	Строка       - путь к каталогу текущей обработки
//
&НаКлиенте
Функция КаталогТекущейОбработки()
	
	Если НЕ ЗначениеЗаполнено(КаталогТекущейОбработки) Тогда
		КаталогТекущейОбработки = КаталогТекущейОбработкиНаСервере();
	КонецЕсли;
	
	Возврат КаталогТекущейОбработки;
	
КонецФункции // КаталогТекущейОбработки()

#КонецОбласти
