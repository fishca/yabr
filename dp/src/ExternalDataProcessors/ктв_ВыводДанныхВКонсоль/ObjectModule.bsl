Перем Владелец;
Перем ПараметрыОбработки;
Перем Данные;

#Область ПрограммныйИнтерфейс

// Функция - Возвращает владельца обработки
// 
// Возвращаемое значение:
//	ВнешняяОбработкаОбъект - обработка-владелец
//
Функция Владелец() Экспорт
	
	Возврат Владелец;
	
КонецФункции // Владелец()

// Процедура - Устанавливает владельца обработки
//
// Параметры:
//	НовыйВладелец      - ВнешняяОбработкаОбъект - обработка-владелец
//
Процедура УстановитьВладельца(Знач НовыйВладелец) Экспорт
	
	Владелец = НовыйВладелец;
	
КонецПроцедуры // УстановитьВладельца()

// Функция - Возвращает значения параметров обработки
// 
// Возвращаемое значение:
//	Структура - параметры обработки
//
Функция Параметры() Экспорт
	
	Возврат ПараметрыОбработки;
	
КонецФункции // Параметры()

// Процедура - Устанавливает значения параметров обработки
//
// Параметры:
//	СтруктураПараметров      - Структура     - значения параметров обработки
//
Процедура УстановитьПараметры(Знач СтруктураПараметров) Экспорт
	
	ПараметрыОбработки = СтруктураПараметров;
	
КонецПроцедуры // УстановитьПараметры()

// Процедура - устанавливает данные для обработки
//
// Параметры:
//	Данные      - Структура     - значения параметров обработки
//
Процедура УстановитьДанные(Знач ВходящиеДанные) Экспорт
	
	Данные = ВходящиеДанные;
	
КонецПроцедуры // УстановитьДанные()

// Функция - возвращает текущие результаты обработки
//
// Возвращаемое значение:
//	Произвольный     - результаты обработки данных
//
Функция РезультатыОбработки() Экспорт
	
	Возврат Неопределено;
	
КонецФункции // РезультатыОбработки()

// Процедура - выполняет обработку данных
//
Процедура ОбработатьДанные() Экспорт
	
	ЗначениеДляВывода = "";
	
	Если ТипЗнч(Данные) = Тип("Массив")
	 ИЛИ ТипЗнч(Данные) = Тип("ФиксированныйМассив")
	 ИЛИ ТипЗнч(Данные) = Тип("Структура")
	 ИЛИ ТипЗнч(Данные) = Тип("ФиксированнаяСтруктура")
	 ИЛИ ТипЗнч(Данные) = Тип("Соответствие")
	 ИЛИ ТипЗнч(Данные) = Тип("ФиксированноеСоответствие") Тогда
	
		ЗначениеДляВывода = ПолучитьЗначениеJSON(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		
		ЗначениеДляВывода = Данные;
		
	Иначе
		
		ЗначениеДляВывода = СокрЛП(Данные);
		
	КонецЕсли;
	
	СообщитьПользователю(ЗначениеДляВывода);
	
	Владелец.ПродолжениеОбработкиДанных(ЗначениеДляВывода, ПараметрыОбработки);
	
КонецПроцедуры // ОбработатьДанные()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает объект владелец о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанных() Экспорт
	
	Если НЕ Владелец = Неопределено Тогда
		Попытка
			Владелец.ЗавершениеОбработкиДанных(ПараметрыОбработки);
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - проверяет тип значения на соответствие допустимым типам
//
// Параметры:
//  Значение             - Произвольный                 - проверяемое значение
//  ДопустимыеТипы       - Строка, Массив(Строка, Тип)  - список допустимых типов
//  ШаблонТекстаОшибки   - Строка                       - шаблон строки сообщения об ошибке
//                                                        ("Некорректный тип значения ""%1"" ожидается тип %2")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьДопустимостьТипа(Знач Значение, Знач ДопустимыеТипы, Знач ШаблонТекстаОшибки = "")
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗнч(ДопустимыеТипы) = Тип("Строка") Тогда
		МассивДопустимыхТипов = СтрРазделить(ДопустимыеТипы, ",");
	ИначеЕсли ТипЗнч(ДопустимыеТипы) = Тип("Массив") Тогда
		МассивДопустимыхТипов = ДопустимыеТипы;
	Иначе
		ВызватьИсключение СтрШаблон("Некорректно указан список допустимых типов, тип ""%1"" ожидается тип %2!",
		                            Тип(ДопустимыеТипы),
									"""Строка"" или ""Массив""");
	КонецЕсли;
	
	Типы = Новый Соответствие();
	
	СтрокаДопустимыхТипов = "";
	
	Для Каждого ТекТип Из МассивДопустимыхТипов Цикл
		ВремТип = ?(ТипЗнч(ТекТип) = Тип("Строка"), Тип(СокрЛП(ТекТип)), ТекТип);
		Типы.Вставить(ВремТип, СокрЛП(ТекТип));
		СтрокаДопустимыхТипов = СтрокаДопустимыхТипов
		                      + ?(СтрокаДопустимыхТипов = "",
							      "",
							      ?(МассивДопустимыхТипов.Найти(ТекТип) = МассивДопустимыхТипов.ВГраница(),
								    " или ",
								    ", "))
		                      + """" + СокрЛП(ТекТип) + """";
	КонецЦикла;
	
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Некорректный тип значения ""%1"" ожидается тип %2!";
	КонецЕсли;
	
	Если Типы[ТипЗначения] = Неопределено Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СокрЛП(ТипЗначения), СтрокаДопустимыхТипов);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДопустимостьТипа()

// Функция - возвращает значение, преобразованное к строке в формате JSON
//
// Параметры:
//	Значение         - Произвольный            - произвольный тип, совместимый с форматом JSON
//
// Возвращаемое значение:
//	Строка           - преобразванное значение, строка в формате JSON
//
Функция ПолучитьЗначениеJSON(Знач Значение) Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб));
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты      = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Попытка
		ЗаписатьJSON(Запись, Значение, НастройкиСериализации);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецФункции // ПолучитьЗначениеJSON()

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                - Любая ссылка на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "") Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Сообщение.КлючДанных = КлючДанных;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) И КлючДанных = Неопределено Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
КонецПроцедуры // СообщитьПользователю()

#КонецОбласти
